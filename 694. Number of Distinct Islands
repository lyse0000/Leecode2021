class Solution:
    def numDistinctIslands(self, grid: List[List[int]]) -> int:
        directions = [(1,0),(-1,0),(0,1),(0,-1)]
        if not grid:
            return 0
        unique = set()
        len_i = len(grid)
        len_j = len(grid[0])
        
        def findShape(shape, i, j, diridx):
            if i<0 or j<0 or i >=len_i or j >= len_j:
                return 
            grid[i][j] = 0
            for diri in range(4):
                dx,dy = directions[diri]
                nx, ny = i+dx, j+dy
                if 0<=nx<len_i and 0<=ny<len_j and grid[nx][ny] == 1: 
                    shape.append(diri)
                    findShape(shape, nx,ny, diri)
            shape.append('-')
        
        for i in range(len_i):
            for j in range(len_j):
                if grid[i][j] == 1:
                    s = []
                    findShape(s, i, j, -1)
                    unique.add(tuple(s))
        
        #print(unique)
        """
        [[1,1,0],[0,1,1],[0,0,0],[1,1,1],[0,1,0]]
        {(2, 0, 2, '-', '-', '-', '-'), (2, 0, '-', 2, '-', '-', '-')}
        """
        return len(unique)
